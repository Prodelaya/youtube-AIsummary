# ============================================
# DOCKER COMPOSE - IA MONITOR
# ============================================
# Servicios de infraestructura local:
# - PostgreSQL: Base de datos principal
# - Redis: Cache + Broker para Celery

version: '3.8'

services:
  # ==========================================
  # POSTGRESQL 15
  # ==========================================
  postgres:
    image: postgres:15-alpine
    # Alpine = imagen ligera (~80MB vs ~250MB standard)
    
    container_name: iamonitor_postgres
    
    # Reiniciar automáticamente si falla
    restart: unless-stopped
    
    # Variables de entorno
    environment:
      # Usuario y contraseña de la BD
      # Lee desde .env o usa valores por defecto
      POSTGRES_USER: ${POSTGRES_USER:-iamonitor}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-iamonitor_dev_password}
      POSTGRES_DB: ${POSTGRES_DB:-iamonitor}
      
      # Configuración de PostgreSQL
      # Optimizada para 8GB RAM (conservadora)
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=es_ES.UTF-8"
    
    # Límites de recursos (importante con 8GB RAM)
    deploy:
      resources:
        limits:
          memory: 512M  # Máximo 512MB RAM
        reservations:
          memory: 256M  # Mínimo 256MB RAM
    
    # Volumen para persistir datos
    volumes:
      # postgres_data es un volumen nombrado (ver sección volumes: al final)
      - postgres_data:/var/lib/postgresql/data
      
      # (Opcional) Montar scripts de inicialización
      # - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    
    # Exponer puerto 5432
    ports:
      - "5432:5432"
    
    # Health check: Verificar que Postgres está listo
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-iamonitor}"]
      interval: 10s      # Verificar cada 10 segundos
      timeout: 5s        # Timeout si no responde en 5s
      retries: 5         # Intentar 5 veces antes de marcar como unhealthy
      start_period: 30s  # Esperar 30s antes del primer check
    
    # Red compartida con otros servicios
    networks:
      - iamonitor_network

  # ==========================================
  # REDIS 7
  # ==========================================
  redis:
    image: redis:7-alpine
    # Alpine = imagen ligera (~30MB)
    
    container_name: iamonitor_redis
    
    restart: unless-stopped
    
    # Comando de inicio con configuración optimizada
    command: >
      redis-server
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --save 60 1
    # Explicación:
    # --maxmemory 256mb: Límite de RAM (suficiente para cache + queue)
    # --maxmemory-policy allkeys-lru: Eliminar claves menos usadas cuando se llena
    # --appendonly yes: Persistencia en disco (AOF log)
    # --save 60 1: Snapshot cada 60s si al menos 1 clave cambió
    
    # Límites de recursos
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    
    # Volumen para persistir datos
    volumes:
      - redis_data:/data
    
    # Exponer puerto 6379
    ports:
      - "6379:6379"
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    
    networks:
      - iamonitor_network

# ==========================================
# VOLÚMENES NOMBRADOS
# ==========================================
# Ubicación real: /var/lib/docker/volumes/
volumes:
  postgres_data:
    # Persiste datos de PostgreSQL
    # Sobrevive a: docker-compose down
    # Se borra con: docker-compose down -v
  
  redis_data:
    # Persiste datos de Redis (AOF + snapshots)

# ==========================================
# RED COMPARTIDA
# ==========================================
networks:
  iamonitor_network:
    driver: bridge
    # Red tipo bridge: Containers se ven entre sí por nombre
    # Ejemplo: FastAPI puede conectar a postgres://postgres:5432
