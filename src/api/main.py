"""
FastAPI Application Factory.

Este m√≥dulo define la aplicaci√≥n principal de FastAPI siguiendo Clean Architecture.
Configura middlewares, routers, documentaci√≥n y gesti√≥n de errores de forma centralizada.

La aplicaci√≥n se inicializa mediante una funci√≥n factory (create_app) para facilitar
testing y permitir diferentes configuraciones seg√∫n el entorno (dev/staging/prod).
"""

from contextlib import asynccontextmanager
from typing import AsyncGenerator

from fastapi import FastAPI, Request, status
from fastapi.exceptions import RequestValidationError
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.responses import JSONResponse
from prometheus_client import make_asgi_app
from starlette.exceptions import HTTPException as StarletteHTTPException

from src.core.config import settings

# Importar routers cuando existan
# from src.api.routes import health, sources, summaries


@asynccontextmanager
async def lifespan(app: FastAPI) -> AsyncGenerator[None, None]:
    """
    Gestiona el ciclo de vida de la aplicaci√≥n FastAPI.

    Se ejecuta al inicio (startup) y al finalizar (shutdown) la aplicaci√≥n.
    √ötil para inicializar conexiones, cargar modelos, cerrar recursos, etc.

    Args:
        app: Instancia de la aplicaci√≥n FastAPI.

    Yields:
        None: Cede el control mientras la aplicaci√≥n est√° activa.

    Examples:
        Durante startup:
        - Inicializar pool de conexiones a BD
        - Cargar modelo Whisper en memoria
        - Verificar conectividad con Redis

        Durante shutdown:
        - Cerrar conexiones a BD
        - Liberar modelo Whisper de memoria
        - Limpiar archivos temporales
    """
    # ==================== STARTUP ====================
    print("üöÄ Iniciando aplicaci√≥n FastAPI...")
    print(f"üìç Entorno: {settings.ENVIRONMENT}")
    print(f"üîß Debug: {settings.DEBUG}")
    print(f"üìä Log Level: {settings.LOG_LEVEL}")

    # TODO: Inicializar conexi√≥n a PostgreSQL
    # TODO: Inicializar conexi√≥n a Redis
    # TODO: Verificar conectividad con servicios externos

    print("‚úÖ Aplicaci√≥n iniciada correctamente")

    # ==================== APLICACI√ìN ACTIVA ====================
    yield

    # ==================== SHUTDOWN ====================
    print("üõë Cerrando aplicaci√≥n FastAPI...")

    # TODO: Cerrar pool de conexiones a BD
    # TODO: Cerrar conexi√≥n a Redis
    # TODO: Limpiar recursos temporales

    print("‚úÖ Aplicaci√≥n cerrada correctamente")


def _get_api_description() -> str:
    """
    Genera la descripci√≥n de la API en formato Markdown.

    Returns:
        str: Descripci√≥n formateada para documentaci√≥n OpenAPI.
    """
    return """
API REST para agregaci√≥n inteligente de contenido sobre IA.

**Caracter√≠sticas principales:**
- üé• Scraping autom√°tico de canales YouTube
- üéôÔ∏è Transcripci√≥n con Whisper (local, gratuito)
- üìù Res√∫menes con ApyHub API (IA)
- üîç B√∫squeda full-text en resumenes
- üìä Clasificaci√≥n por temas y keywords

**Tecnolog√≠as:**
FastAPI ¬∑ PostgreSQL ¬∑ Redis ¬∑ Celery ¬∑ Whisper ¬∑ Docker
"""


def create_app() -> FastAPI:
    """
    Factory function para crear la aplicaci√≥n FastAPI.

    Esta funci√≥n centraliza toda la configuraci√≥n de la aplicaci√≥n:
    - Metadata (t√≠tulo, descripci√≥n, versi√≥n)
    - Middlewares (CORS, seguridad)
    - Routers (endpoints)
    - Manejadores de errores
    - Documentaci√≥n (Swagger/ReDoc)

    Returns:
        FastAPI: Instancia configurada de la aplicaci√≥n.

    Notes:
        - Se usa una factory function (en lugar de instancia global) para facilitar testing.
        - Los tests pueden crear aplicaciones con configuraciones espec√≠ficas.
        - Permite lazy loading de dependencias seg√∫n entorno.

    Examples:
        >>> app = create_app()
        >>> # En tests:
        >>> test_app = create_app()  # Configuraci√≥n aislada
    """
    # ==================== METADATA DE LA APLICACI√ìN ====================
    app = FastAPI(
        title="YouTube AI Summary API",
        description=_get_api_description(),
        version="0.1.0",
        docs_url="/api/docs",
        redoc_url="/api/redoc",
        openapi_url="/api/openapi.json",
        lifespan=lifespan,
        debug=settings.DEBUG,
    )

    # ==================== MIDDLEWARES ====================

    # 1. CORS - Permitir peticiones desde frontend
    app.add_middleware(
        CORSMiddleware,
        allow_origins=settings.CORS_ORIGINS,
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )

    # 2. Trusted Host - Prevenir ataques Host Header Injection
    if settings.is_production:
        app.add_middleware(
            TrustedHostMiddleware,
            allowed_hosts=settings.TRUSTED_HOSTS,
        )

    # ==================== MANEJADORES DE ERRORES ====================

    @app.exception_handler(StarletteHTTPException)
    async def http_exception_handler(request: Request, exc: StarletteHTTPException) -> JSONResponse:
        """
        Maneja excepciones HTTP est√°ndar (404, 403, 500, etc.).

        Args:
            request: Petici√≥n HTTP que gener√≥ el error.
            exc: Excepci√≥n HTTP capturada.

        Returns:
            JSONResponse: Respuesta JSON estandarizada con detalles del error.

        Examples:
            Error 404:
            {
                "error": {
                    "code": 404,
                    "message": "Not Found",
                    "detail": "Video no encontrado"
                }
            }
        """
        return JSONResponse(
            status_code=exc.status_code,
            content={
                "error": {
                    "code": exc.status_code,
                    "message": exc.detail,
                    "path": str(request.url),
                }
            },
        )

    @app.exception_handler(RequestValidationError)
    async def validation_exception_handler(
        request: Request, exc: RequestValidationError
    ) -> JSONResponse:
        """
        Maneja errores de validaci√≥n de Pydantic.

        Args:
            request: Petici√≥n HTTP que gener√≥ el error.
            exc: Excepci√≥n de validaci√≥n capturada.

        Returns:
            JSONResponse: Respuesta JSON con detalles de campos inv√°lidos.

        Examples:
            Request inv√°lido:
            {
                "error": {
                    "code": 422,
                    "message": "Validation Error",
                    "details": [
                        {
                            "field": "email",
                            "message": "invalid email format",
                            "type": "value_error.email"
                        }
                    ]
                }
            }
        """
        return JSONResponse(
            status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
            content={
                "error": {
                    "code": 422,
                    "message": "Validation Error",
                    "details": exc.errors(),
                }
            },
        )

    @app.exception_handler(Exception)
    async def general_exception_handler(request: Request, exc: Exception) -> JSONResponse:
        """
        Maneja excepciones no capturadas (√∫ltimo recurso).

        Args:
            request: Petici√≥n HTTP que gener√≥ el error.
            exc: Excepci√≥n gen√©rica capturada.

        Returns:
            JSONResponse: Respuesta JSON gen√©rica de error interno.

        Notes:
            - En producci√≥n, NO expone detalles internos (seguridad).
            - En desarrollo, muestra traceback completo para debugging.
            - Todos los errores se loguean para an√°lisis posterior.

        Examples:
            Error gen√©rico en producci√≥n:
            {
                "error": {
                    "code": 500,
                    "message": "Internal Server Error"
                }
            }
        """
        # TODO: Loguear error con structlog
        # logger.error("Unhandled exception", exc_info=exc, request=request)

        return JSONResponse(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            content={
                "error": {
                    "code": 500,
                    "message": "Internal Server Error",
                    # Solo mostrar detalles en desarrollo
                    "detail": str(exc) if settings.is_development else None,
                }
            },
        )

    # ==================== ENDPOINTS BASE ====================

    @app.get("/", tags=["Root"])
    def root() -> dict[str, str]:
        """
        Endpoint ra√≠z de bienvenida.

        Returns:
            dict: Mensaje de bienvenida con links √∫tiles.

        Examples:
            GET /
            {
                "message": "YouTube AI Summary API",
                "version": "0.1.0",
                "docs": "/api/docs"
            }
        """
        return {
            "message": "YouTube AI Summary API",
            "version": "0.1.0",
            "docs": "/api/docs",
            "environment": settings.ENVIRONMENT,
        }

    @app.get("/health", tags=["Health"])
    def health_check() -> dict[str, str]:
        """
        Health check endpoint para monitoreo.

        Verifica que la aplicaci√≥n est√° activa y responde correctamente.
        √ötil para:
        - Load balancers (verificar si la instancia est√° viva)
        - Kubernetes liveness/readiness probes
        - Monitoreo con Prometheus/Grafana
        - Scripts de deployment

        Returns:
            dict: Estado de la aplicaci√≥n.

        Examples:
            GET /health
            {
                "status": "ok",
                "environment": "development"
            }
        """
        # TODO: Verificar conexi√≥n a BD y Redis
        # TODO: Retornar 503 Service Unavailable si alg√∫n servicio cr√≠tico falla
        return {
            "status": "ok",
            "environment": settings.ENVIRONMENT,
        }

    # ==================== PROMETHEUS METRICS ====================
    # Montar app de m√©tricas en /metrics
    metrics_app = make_asgi_app()
    app.mount("/metrics", metrics_app)

    # ==================== ROUTERS ====================
    # TODO: Incluir routers cuando est√©n implementados
    # app.include_router(health.router, prefix="/api/v1", tags=["Health"])
    # app.include_router(sources.router, prefix="/api/v1", tags=["Sources"])
    # app.include_router(summaries.router, prefix="/api/v1", tags=["Summaries"])

    return app


# ==================== INSTANCIA GLOBAL ====================
# Esta instancia se usa en producci√≥n con Uvicorn
app = create_app()


# ==================== PUNTO DE ENTRADA (CLI) ====================
if __name__ == "__main__":
    """
    Punto de entrada para ejecuci√≥n directa con Python.

    √ötil solo para desarrollo r√°pido. En producci√≥n usar Uvicorn directamente:

        poetry run uvicorn src.api.main:app --host 0.0.0.0 --port 8000

    Examples:
        Desarrollo:
        $ python -m src.api.main
        $ # O con Poetry:
        $ poetry run python -m src.api.main
    """
    import uvicorn

    uvicorn.run(
        "src.api.main:app",
        host=settings.API_HOST,
        port=settings.API_PORT,
        reload=settings.is_development,
        log_level=settings.LOG_LEVEL.lower(),
        access_log=settings.is_development,
    )
